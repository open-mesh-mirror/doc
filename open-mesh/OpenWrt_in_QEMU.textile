h1. OpenWrt in QEMU

The [[open-mesh:Emulation Environment#Architecture|simple emulation architecture]] can be implemented rather easily using qemu and an x86_64 image from OpenWrt.

h2. OpenWrt preparation

It is possible to just use an x86_64 which was "downloaded from OpenWrt's servers":https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-x86-64-combined-ext4.img.gz. But it is highly recommended to build an own image which:

* enables the routing protocols (like batman-adv) from the "openwrt-routing feed":https://git.openwrt.org/?p=feed/routing.git;a=summary. 
* enables the 9p filesystem (and virtio)
* integrates its own startup scripts (for automatic test initialization and shared path support) via <code>files/etc/rc.local</code> <pre><code class="shell">
mkdir -p files/etc/
cat > files/etc/rc.local << "EOF"
#!/bin/sh

mkdir -p /host
mount -t 9p host /host
[ ! -x /host/test-init.sh ] || /host/test-init.sh
EOF
</code></pre>

The shared path is a folder from the host system which is mapped into all virtual instances. It can be used exchange data between the instances and the host.

The resulting openwrt-x86-64-combined-ext4.img.gz has to be extracted and copies to the path with the other scripts.

h2. Start scripts for the simple environment

The virtual instances and the interconnect will be started using a set of simple scripts. This simplifies everything and makes the setup more reproducible.

h3. interconnect initialization

The interconnect (bridge br-qemu with 3 tap devices) has to be started first to have a simple network. All devices in this interconnect can talk to each other - which is not optimal for tests but enough for a start. More complex network setups can be on the pages [[vde switch interconnect]] and [[bridge interconnect]].

The tap interfaces will be created with access rights for the current user. This allows the qemu instance to start up without being root.


<pre><code class="shell">
cat > interconnect.sh << "EOF"
#! /bin/sh

USER="$(whoami)"
BRIDGE=br-qemu
NUM_SESSIONS=3

sudo ip link add "${BRIDGE}" type bridge
for i in $(seq 1 "${NUM_SESSIONS}")`; do
        sudo ip tuntap add dev tap$i mode tap user "$USER"
        sudo ip link set tap$i up
        sudo ip link set tap$i master "${BRIDGE}"
done

sudo ip link set "${BRIDGE}" up
sudo ip addr replace 192.168.251.1/24 dev "${BRIDGE}"
EOF

chmod +x interconnect.sh
</code></pre>

h3. VM instances bringup

Each instance will need to write to the provided image. If the same image is specified as drive for each instance then writes to this file would conflict and data corruption would happen. To avoid this, each instance gets its own (copy on write) snapshot of the base image.

The three node environment must be started inside a screen session. Each instance will end up in an own screen window. This allows access to the serial console of each instance while having each instance's output separated from each other.

The qemu instance is started in a rather specific way to enable all features which might be needed during the test:

* KVM is enabled to speed up the virtual instances (by avoiding slow emulation as much as possible)
* no graphic display is activated
* serial output is enabled for kernel output and login shell
* 2 core SMP is activated to better recreate SMP race conditions
* 512 MB RAM is provided to the virtual instance ("KSM":https://en.wikipedia.org/wiki/Kernel_same-page_merging should be activated in setups with larger number of virtual instances)
* a nic is connected to the tap interface (from the interconnect) to transport mesh (and other) traffic
* a user nic is created to transport (NAT'ed) traffic to/from the internet
* a shared path from host is provided for the client
* the qemu gdb server is enabled to allow [[open-mesh:Kernel_debugging_with_qemu's_GDB_server|kernel debugging]]


The @SHARED_PATH@ in run.sh has to be changed to a valid path which is used to share things like a precompiled batman-adv.ko and other tools

<pre><code class="shell">
cat > run.sh << "EOF"
#! /bin/bash

BOOTARGS=()

if [ -z "${STY}" ]; then
    echo "must be started inside a screen session" >&2
    exit 1
fi

SHARED_PATH="$(pwd)"
NUM_SESSIONS=3

## OpenWrt in QEMU
BASE_IMG=openwrt-x86-64-combined-ext4.img

## Kernel hacking Debian image
#BASE_IMG=debian.img
#BOOTARGS+=("-kernel" "linux-next/arch/x86/boot/bzImage")
#BOOTARGS+=("-append" "root=/dev/vda rw console=ttyS0 nokaslr")

for i in $(seq 1 "${NUM_SESSIONS}"); do
    if [ ! -e "/sys/class/net/tap${i}" ]; then
        echo "hub script must be started first to create tap$i interface" >&2
        exit 1
    fi
done

for i in $(seq 1 "${NUM_SESSIONS}"); do
    normalized_id="$(echo "$i"|awk '{ printf "%02d\n",$1 }')"
    twodigit_id="$(echo $i|awk '{ printf "%02X", $1 }')"

    qemu-img create -b "${BASE_IMG}" -f qcow2 root.cow$i
    screen qemu-system-x86_64 -enable-kvm -name "instance${i}" \
        "${BOOTARGS[@]}" \
        -display none -no-user-config -nodefaults \
        -m 512 -device virtio-balloon \
        -cpu host -smp 2 -machine q35,accel=kvm,usb=off,dump-guest-core=off \
        -drive file=root.cow$i,if=virtio,cache=unsafe \
        -nic tap,ifname=tap$i,script=no,model=virtio-net-pci,mac=02:ba:de:af:fe:"${twodigit_id}" \
        -nic user,model=virtio-net-pci,mac=06:ba:de:af:fe:"${twodigit_id}" \
        -virtfs local,path="${SHARED_PATH}",security_model=none,mount_tag=host \
        -gdb tcp:127.0.0.1:$((23000+$i)) \
        -device virtio-rng-pci \
        -serial mon:stdio
    sleep 1
done
EOF

chmod +x run.sh
</code></pre>

h3. Automatic test initialization

The test-init.sh script in the SHARED_PATH can be used to automatically initialize the test setup during boot. A simple example is:

<pre><code class="shell">
cat > test-init.sh << "EOF"
#! /bin/sh

set -e

## Simple batman-adv setup

rmmod batman-adv || true
modprobe batman-adv
batctl routing_algo BATMAN_IV
batctl if add eth0
batctl it 5000
ip link set up dev eth0
ip link set up dev bat0
EOF

chmod +x test-init.sh
</code></pre>


h2. Start

Everything can then be started up inside a screen session

<pre><code class="shell">
screen
./interconnect.sh
./run.sh
</code></pre>