h1. Broadcasts in B.A.T.M.A.N. Advanced


!broadcast.png!
__A node broadcasting through the mesh__

Broadcasting is a method in computer networks to distribute a packet to all available nodes. batman-adv supports broadcast via its __classic flooding__ algorithm.

h2. __Classic Flooding__

The basic algorithm used by batman-adv is __classic flooding__. Here every node simply repeats a broadcast frame it received on all its available interfaces. That way every node receives the broadcast frame eventually.

To avoid frames looping around forever (a broadcast storm) an originating batman-adv node tags the frame with a sequence number which increases with every new broadcast frame this node transmits. The sequence number allows other nodes to detect whether it received a frame before. Such duplicates will then simply be ignored.

h2. Interface Type: WiFi vs. Others

In 802.11 based wireless networks broadcast transmissions have one specific downside compared to unicast: While for unicast transmissions a missing frame is detected and retransmitted ("ARQ":https://en.wikipedia.org/wiki/Automatic_repeat_request) a broadcast transmission is performed only once, with no acknowledgements.

To compensate for that batman-adv (re-)broadcasts a frame on a wireless interface not just once but three times when classic flooding is used.

Furthermore, for the second and third broadcast a delay of 5ms is applied for each to increase the probability that one of the broadcasts arrives.

Last but not least 802.11 broadcasts are usually performed at the lowest Wifi bitrate. If a high broadcast throughput is needed, it is therefore usually recommended to increase the Wifi rate for multicast transmissions in the wifi driver.

h2. Gateway Feature: DHCP Optimizations

todo

h2. IP Multicast Optimizations

todo

h2. Broadcast Avoidances

When a node sees just one or no neighbor on a specific interface, then the following, simple rules can be applied to avoid broadcasts on this interface:

h3. I.I) No Neighbor

!bcast-avoid-no-neighbor.png!

* If an interface has no neighbor, then no broadcast is necessary.

We can avoid sending a packet into the void.

h3. I.II) Single Neighbor: Is Originator

!bcast-avoid-single-orig.png!

_Three nodes with a single neighbor per interface each_

* If an interface has just one neighbor and it matches the OGM2 or broadcast packets originator address, then no broadcast is necessary.

We can avoid echoing a packet back to the node it originally came from.

h3. I.III) Single Neighbor: Is Previous Sender

!bcast-avoid-single-fwd.png!

h2. __noflood__ Tagging

todo